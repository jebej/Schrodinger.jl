function gen_likelihood_model_1Q()
    # Generate the A matrix used to calculate likelihoods
    # The A matrix depends on the input states and measurement operators
    # We choose the 6 axial Bloch states as our inputs and measurements
    # |+‚ü©,|-‚ü©,|+i‚ü©,|-i‚ü©,|1‚ü©,|0‚ü©
    œÅ = normalize!.(Operator.(Ket.([[1,1],[1,-1],[1,1im],[1,-1im],[1,0],[0,1]])))
    E = œÅ ./ 3
    return mapreduce(transpose,vcat,[vec(full(transpose(œÅ)‚äóE)) for œÅ ‚àà œÅ, E ‚àà E])
end

# below is the actual projected gradient descent algorithm from Knee, et al.
# Quantum process tomography via completely positive and trace-preserving
# projection. Phys. Rev. A 98, 062336 (2018).

function pdg_process_tomo(M,A,info=false)
    # Choi process matrix reconstruction with maximum likelihood projected
    # gradient descent
    size(A,1)==length(M) || throw(ArgumentError("A matrix inconsistent with number of measurements!"))
    abs(sum(M)-1)<0.1 || throw(ArgumentError("measurement counts not normalized!"))
    # infer space dimensions from A matrix
    d = isqrt(isqrt(size(A,2)))
    # initial Choi matrix guess, the identity map
    C = Matrix{ComplexF64}(I/d,d^2,d^2)
    # objective and gradient functions setup
    f = C -> loglikelihood(M,C,A)
    ‚àáf = C -> loglikelihood_gradient(M,C,A)
    # metaparameters & initial cost calculation
    Œº = 3/2d^2; Œ≥ = 0.3
    c‚ÇÅ = 1E6; c‚ÇÇ = f(C)
    info && println("start cost = $c‚ÇÇ")
    # iterate through projected gradient descent steps, with backtracking
    h = CPTP_helpers(C)
    while c‚ÇÅ - c‚ÇÇ > 1E-10
        c‚ÇÅ, ‚àác = c‚ÇÇ, ‚àáf(C)
        D = project_CPTP(C.-1/Œº.*‚àác, h) - C
        Œ± = 1.0; Œ† = Œ≥*real(D‚ãÖ‚àác)
        while (c‚ÇÇ = f(C.+Œ±.*D)) > c‚ÇÅ + Œ±*Œ†
            Œ± = Œ±/2 # backtrack
        end
        @. C = C + Œ±*D
    end
    info && println("final cost = $c‚ÇÇ, Œîc = $(c‚ÇÅ-c‚ÇÇ)")
    return C
end

function loglikelihood(M,C,A)
    # Binomial statistics for the measurement count probability, up to some irrelevant constant
    P = real.(A*vec(C))
    P .= max.(P,1E-16)
    return -real(transpose(vec(M))*log.(P))
end

function loglikelihood_gradient(M,C,A)
    P = real.(A*vec(C))
    P .= max.(P,1E-16)
    return unvec(-A'*(vec(M)./P))
end

function project_CPTP(C,h)
    # generate storage objects
    x‚ÇÅ = copy(vec(C)); y‚ÇÅ = zero(x‚ÇÅ);
    x‚ÇÇ = copy(y‚ÇÅ); y‚ÇÇ = copy(y‚ÇÅ)
    p = copy(y‚ÇÅ); q = copy(y‚ÇÅ)
    p_diff = 1.0; q_diff = 1.0
    D,V,MdagvecùïÄ,MdagM = h
    # iterate through TP & CP projections
    while p_diff^2 + q_diff^2 + 2*abs(p‚ãÖ(x‚ÇÇ-x‚ÇÅ)) + 2*abs(q‚ãÖ(y‚ÇÇ-y‚ÇÅ)) > 1E-6
        y‚ÇÇ = project_TP(x‚ÇÅ+p,MdagvecùïÄ,MdagM)
        p_diff = norm(x‚ÇÅ-y‚ÇÇ,2)
        @. p = x‚ÇÅ - y‚ÇÇ + p
        x‚ÇÇ = project_CP(y‚ÇÇ+q,D,V)
        q_diff = norm(y‚ÇÇ-x‚ÇÇ,2)
        @. q = y‚ÇÇ - x‚ÇÇ + q
        x‚ÇÅ, x‚ÇÇ = x‚ÇÇ, x‚ÇÅ
        y‚ÇÅ, y‚ÇÇ = y‚ÇÇ, y‚ÇÅ
    end
    return unvec(x‚ÇÅ)
end

function project_CP(vecC,D,V)
    # Project the process onto the completely positive subspace by making the
    # Choi matrix positive semidefinite
    # We do this by taking the eigendecomposition, setting any negative
    # eigenvalues to 0, and reconstructing the Choi matrix
    @static if VERSION < v"0.7.0-"
        H = unvec(vecC)
        @inbounds for i = 1:size(H,1); H[i,i] = real(H[i,i]); end
        hermfact!(D,V,Hermitian(H))
    else
        hermfact!(D,V,Hermitian(unvec(vecC)))
    end
    D .= max.(D,0)
    return vec(V*Diagonal(D)*V')
end

function project_TP(vecC,MdagvecùïÄ,MdagM)
    # Project the process onto the trace-preserving subspace
    d‚Åª¬π = 1/isqrt(isqrt(length(vecC)))
    return vecC .- d‚Åª¬π.*MdagM*vecC .+ d‚Åª¬π.*MdagvecùïÄ
end

function CPTP_helpers(C)
    D = Vector{real(eltype(C))}(undef,size(C,1))
    V = Matrix{eltype(C)}(undef,size(C))
    MdagvecùïÄ,MdagM = TP_helper_matrices(C)
    return D,V,MdagvecùïÄ,MdagM
end

function TP_helper_matrices(C)
    d = isqrt(size(C,1))
    ùïÄ = Matrix{Int8}(I,d,d); k = zeros(Int8,1,d)
    # this can be done more efficiently, but prob doesn't matter
    M = sum((@inbounds k[i],k[mod1(i-1,d)] = 1,0; ùïÄ ‚äó k ‚äó ùïÄ ‚äó k) for i=1:d)
    return M'*vec(ùïÄ), M'*M
end
